{"version":3,"sources":["components/Posts/Posts.module.css","components/Posts/Post/Details.module.css","components/Users/Users.module.css","components/Nav/Nav.module.css","App.module.css","api/api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Nav/Nav.tsx","redux/posts-reducer.ts","components/common/Modal/Modal.tsx","components/Posts/Posts.tsx","components/Posts/PostsContainer.tsx","components/Posts/Post/Details.tsx","redux/comment-reducer.ts","components/Posts/Post/DetailsContainer.tsx","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","usersAPI","get","then","res","postsAPI","userId","titleValue","newText","post","postId","delete","body","put","commentAPI","initialState","getUsersTC","dispatch","console","log","data","type","users","Users","props","className","style","userWrapper","map","u","username","name","email","address","city","street","suite","zipcode","phone","to","website","company","catchPhrase","bs","postButton","id","posts","UsersContainer","this","React","Component","compose","connect","state","Nav","navContainer","navLink","Modal","useState","setTitleValue","setNewText","active","onClick","setActive","e","stopPropagation","value","onChange","currentTarget","placeholder","addPost","onAddPost","Posts","modalActive","setModalActive","postsElements","p","postsWrapper","titleBlock","title","bodyBlock","detailsButton","addButton","PostsContainer","match","params","getPostsTC","addPostTC","withRouter","addPostAC","Details","postText","String","find","editMode","setEditMode","setTitle","commentsWrapper","postContainer","width","textAlign","onDoubleClick","autoFocus","buttons","updatePostTC","deletePost","color","comments","c","singleComment","getCommentsTC","deletePostTC","deletePostAC","updatePostAC","App","useDispatch","useEffect","appWrapper","path","render","exact","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9eef5637.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"detailsButton\":\"Posts_detailsButton__1vkOb\",\"postsWrapper\":\"Posts_postsWrapper__1WaIK\",\"titleBlock\":\"Posts_titleBlock__6lgee\",\"bodyBlock\":\"Posts_bodyBlock__brxwr\",\"addButton\":\"Posts_addButton__1fzfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detailsButton\":\"Details_detailsButton__19LxM\",\"buttons\":\"Details_buttons__3ct0g\",\"commentsWrapper\":\"Details_commentsWrapper__1wh-H\",\"singleComment\":\"Details_singleComment__2pj9I\",\"postContainer\":\"Details_postContainer__1sDo0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"Users_userWrapper__3DvIg\",\"users\":\"Users_users__3qgNQ\",\"postButton\":\"Users_postButton__RQpqo\",\"posts\":\"Users_posts__hv-aL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"Nav_navContainer__KaB7q\",\"navLink\":\"Nav_navLink__GR-KT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__36dQq\"};","import axios from 'axios';\r\nimport {UsersDataType} from '../redux/users-reducer';\r\nimport {PostsDataType} from '../redux/posts-reducer';\r\nimport {CommentsDataType} from '../redux/comment-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://jsonplaceholder.typicode.com/`,\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers () {\r\n        return instance.get<Array<UsersDataType>>('users')\r\n            .then(res => res)\r\n    },\r\n}\r\nexport const postsAPI = {\r\n    getPosts (userId: number) {\r\n        return instance.get<Array<PostsDataType>>(`posts?userId=${userId}`)\r\n            .then(res => res)\r\n    },\r\n    addPost (titleValue: string, newText: string) {\r\n        return instance.post('posts', {titleValue, newText})\r\n            .then(res => res)\r\n    },\r\n    deletePost (postId: number) {\r\n        return instance.delete(`posts/${postId}`)\r\n            .then(res => res)\r\n    },\r\n    updatePost (body: string, postId: number) {\r\n        return instance.put(`posts/${postId}`,\r\n            {body: body})\r\n            .then(res => res)\r\n    }\r\n}\r\nexport const commentAPI = {\r\n    getComments (postId: number) {\r\n        return instance.get<Array<CommentsDataType>>(`comments?postId=${postId}`)\r\n            .then(res => res)\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/api';\r\n\r\ntype CompanyType = {\r\n    name: string\r\n    catchPhrase: string\r\n    bs: string\r\n}\r\n\r\ntype GeoType = {\r\n    lat: string\r\n    lng: string\r\n}\r\n\r\ntype AddressType = {\r\n    street: string\r\n    suite: string\r\n    city: string\r\n    zipcode: string\r\n    geo: GeoType\r\n}\r\n\r\nexport type UsersDataType = {\r\n    id: number\r\n    name: string\r\n    username: string\r\n    email: string\r\n    address: AddressType\r\n    phone: string\r\n    website: string\r\n    company: CompanyType\r\n}\r\n\r\ntype ActionsType = setUsersAT\r\n\r\nexport type setUsersAT = ReturnType<typeof setUsersAC>\r\n\r\nlet initialState: Array<UsersDataType> = []\r\n\r\nexport const usersReducer = (state: Array<UsersDataType> = initialState, action: ActionsType): Array<UsersDataType> => {\r\n    switch (action.type) {\r\n        case 'SET-USERS': {\r\n            return action.users.map(u => {\r\n                return {...u}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setUsersAC = (users: Array<UsersDataType>) => {\r\n    return {type: 'SET-USERS', users} as const\r\n}\r\n\r\nexport const getUsersTC = () => (dispatch: Dispatch) => {\r\n    usersAPI.getUsers().then(res => {\r\n        console.log(res.data)\r\n        dispatch(setUsersAC(res.data))\r\n    });\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UsersDataType} from '../../redux/users-reducer';\r\nimport style from './Users.module.css'\r\n\r\ntype UserPropsType = {\r\n    users: Array<UsersDataType>\r\n}\r\n\r\nexport const Users = (props: UserPropsType) => {\r\n\r\n    return (\r\n        <div className={style.userWrapper}>\r\n            {\r\n                props.users.map(u => <div key={u.id} className={style.users}>\r\n                    <h3>\r\n                        Username: {u.username} <br/>\r\n                        Full name: <br/>\r\n                        {u.name}\r\n                    </h3>\r\n                    <div>\r\n                        E-mail: <br/>\r\n                        {u.email}\r\n                    </div>\r\n                    <div>\r\n                        Address: <br/>\r\n                        {u.address.city} <br/>\r\n                        {u.address.street}, {u.address.suite} <br/>\r\n                        {u.address.zipcode}\r\n                    </div>\r\n                    <div>\r\n                        Mobile phone: <br/>\r\n                        {u.phone}\r\n                    </div>\r\n                    <div>\r\n                        Personal website: <br/>\r\n                        <NavLink to=\"\"> {u.website}</NavLink>\r\n                    </div>\r\n                    <div>\r\n                        Company: <br/>\r\n                        {u.company.name} <br/>\r\n                        Catchphrase: <br/>\r\n                        {u.company.catchPhrase} <br/>\r\n                        Sphere of activity: <br/>\r\n                        {u.company.bs}\r\n                    </div>\r\n                    <div className={style.postButton}>\r\n                        <NavLink to={`/user/${u.id}`} className={style.posts}>\r\n                                Posts\r\n                        </NavLink>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Users } from './Users';\r\nimport {ReduxStoreType} from '../../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {getUsersTC, UsersDataType} from '../../redux/users-reducer';\r\n\r\ntype UserContainerPropsType = {\r\n    users: Array<UsersDataType>\r\n    getUsersTC: () => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UserContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersTC()\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Users users={this.props.users}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStoreType) => {\r\n    return {\r\n        users: state.users\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUsersTC\r\n    }),\r\n) (UsersContainer)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './Nav.module.css'\r\n\r\nexport const Nav = () => {\r\n\r\n    return (\r\n        <nav className={style.navContainer}>\r\n            <div>\r\n                <NavLink to={'/users'} className={style.navLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}","import {Dispatch} from 'redux';\r\nimport {postsAPI} from '../api/api';\r\n\r\ntype ActionsType = setUserPostsAT | addPostAT | deletePostAT | updatePostAT\r\n\r\nexport type setUserPostsAT = ReturnType<typeof setUserPostsAC>\r\nexport type addPostAT = ReturnType<typeof addPostAC>\r\nexport type deletePostAT = ReturnType<typeof deletePostAC>\r\nexport type updatePostAT = ReturnType<typeof updatePostAC>\r\n\r\nexport type PostsDataType = {\r\n    userId: number\r\n    id: number\r\n    title: string | undefined\r\n    body: string\r\n}\r\n\r\nlet initialState: Array<PostsDataType> = []\r\n\r\nexport const postsReducer = (state: Array<PostsDataType> = initialState, action: ActionsType): Array<PostsDataType> => {\r\n    switch (action.type) {\r\n        case 'SET-POSTS': {\r\n            return action.posts.map(u => {\r\n                return {...u}\r\n            })\r\n        }\r\n        case 'ADD-POST': {\r\n            return [{\r\n                userId: 1,\r\n                id: 100 + 1,\r\n                title: action.titleValue,\r\n                body: action.newText\r\n            }, ...state]\r\n        }\r\n        case 'DELETE-POST': {\r\n            return state.filter(p => p.id !== action.postId)\r\n        }\r\n        case 'UPDATE-POST': {\r\n            return state.map(p => p.id === action.postId ? {...p, body: action.body} : p)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserPostsAC = (posts: Array<PostsDataType>) => {\r\n    return {type: 'SET-POSTS', posts} as const\r\n}\r\n\r\nexport const addPostAC = (titleValue: string, newText: string) => {\r\n    return {type: 'ADD-POST', titleValue, newText} as const\r\n}\r\n\r\nexport const deletePostAC = (postId: number) => {\r\n    return {type: 'DELETE-POST', postId} as const\r\n}\r\nexport const updatePostAC = (body: string, postId: number) => {\r\n    return {type: 'UPDATE-POST', postId, body} as const\r\n}\r\n\r\nexport const getPostsTC = (userId: number) => (dispatch: Dispatch) => {\r\n    postsAPI.getPosts(userId).then(res => {\r\n        console.log(res.data)\r\n        dispatch(setUserPostsAC(res.data))\r\n    });\r\n}\r\nexport const addPostTC = (titleValue: string, newText: string) => (dispatch: Dispatch) => {\r\n    postsAPI.addPost(titleValue, newText).then(res => {\r\n        console.log(res.data)\r\n        dispatch(addPostAC(titleValue, newText))\r\n    });\r\n}\r\nexport const deletePostTC = (postId: number) => (dispatch: Dispatch) => {\r\n    postsAPI.deletePost(postId).then(res => {\r\n        console.log(res.data)\r\n        dispatch(deletePostAC(postId))\r\n    });\r\n}\r\nexport const updatePostTC = (body: string, postId: number) => (dispatch: Dispatch) => {\r\n    postsAPI.updatePost(body, postId).then(res => {\r\n        dispatch(updatePostAC(body, postId))\r\n    });\r\n}","import React, {useState} from 'react';\r\nimport './Modal.css'\r\n\r\ntype ModalPropsType = {\r\n    active: boolean\r\n    setActive: (active: boolean) => void\r\n    addPost: (titleValue: string, newText: string) => void\r\n}\r\n\r\nexport const Modal = (props: ModalPropsType) => {\r\n\r\n    const [titleValue, setTitleValue] = useState<string>('')\r\n    const [newText, setNewText] = useState<string>('')\r\n\r\n    const setActiveModal = () => props.setActive(!props.active)\r\n\r\n    const onAddPost = (titleValue: string, newText: string) => {\r\n        props.addPost(titleValue, newText)\r\n        props.setActive(false)\r\n    }\r\n\r\n    return (\r\n        <div className={props.active ? 'modal active' : 'modal'}\r\n             onClick={setActiveModal}>\r\n            <div className={props.active ? 'modal_content active' : 'modal_content'}\r\n                 onClick={(e) => e.stopPropagation()}>\r\n                <h2>\r\n                    Write a new post:\r\n                </h2>\r\n                <div>\r\n                    <input value={titleValue}\r\n                           onChange={(e) => setTitleValue(e.currentTarget.value)}\r\n                           placeholder={'Title'}\r\n                           className=\"addNewTitle\"/>\r\n                </div>\r\n                <div>\r\n                <textarea value={newText}\r\n                          onChange={(e) => setNewText(e.currentTarget.value)}\r\n                          placeholder={'Your message'}\r\n                          className=\"addNewText\"/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => onAddPost(titleValue, newText)}\r\n                            className=\"sendButton\">\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PostsDataType} from '../../redux/posts-reducer';\r\nimport {Modal} from '../common/Modal/Modal';\r\nimport style from './Posts.module.css'\r\n\r\ntype UserPropsType = {\r\n    posts: Array<PostsDataType>\r\n    addPost: (titleValue: string, newText: string) => void\r\n}\r\n\r\nexport const Posts = (props: UserPropsType) => {\r\n    const [modalActive, setModalActive] = useState<boolean>(false)\r\n\r\n    const onAddPost = (titleValue: string, newText: string) => {\r\n        props.addPost(titleValue, newText)\r\n    }\r\n\r\n    const postsElements = props.posts.map(p =>\r\n        <div key={p.id} className={style.postsWrapper}>\r\n            <h4 className={style.titleBlock}>\r\n                {p.title}\r\n            </h4>\r\n            <div className={style.bodyBlock}>\r\n                {p.body}\r\n            </div>\r\n            <div>\r\n                <NavLink to={`/user/${p.userId}/postInfo/${p.id}`} className={style.detailsButton}>\r\n                        Details\r\n                </NavLink>\r\n            </div>\r\n        </div>)\r\n\r\n    return (\r\n        <div>\r\n            <Modal active={modalActive} setActive={setModalActive} addPost={onAddPost}/>\r\n            <div className={style.titleBlock}>\r\n                <h2>\r\n                    My posts:\r\n                </h2>\r\n            </div>\r\n            <div className={style.addButton}>\r\n                <button onClick={() => setModalActive(true)} className={style.detailsButton}>\r\n                    Add new\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ReduxStoreType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {addPostTC, getPostsTC, PostsDataType} from '../../redux/posts-reducer';\r\nimport {Posts} from './Posts';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\n\r\ntype PostsContainerPropsType = {\r\n    match: { params: { userId: number } }\r\n    posts: Array<PostsDataType>\r\n    getPostsTC: (userId: number) => void\r\n    addPostTC: (titleValue: string, newText: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & PostsContainerPropsType\r\n\r\nclass PostsContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId;\r\n        this.props.getPostsTC(userId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Posts posts={this.props.posts} addPost={this.props.addPostTC}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStoreType) => {\r\n    return {\r\n        posts: state.posts\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {getPostsTC, addPostTC}),\r\n)(PostsContainer)","import React, {useState} from 'react';\r\nimport {CommentsDataType} from '../../../redux/comment-reducer';\r\nimport {PostsDataType} from '../../../redux/posts-reducer';\r\nimport style from './Details.module.css'\r\n\r\ntype DetailsPropsType = {\r\n    comments: Array<CommentsDataType>\r\n    posts: Array<PostsDataType>\r\n    postId: number\r\n    deletePost: (postId: number) => void\r\n    updatePostTC: (body: string, postId: number) => void\r\n}\r\n\r\nexport const Details = (props: DetailsPropsType) => {\r\n    const postText = String(props.posts.find(p => p.id === +props.postId)?.body);\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const [title, setTitle] = useState<string>(postText)\r\n\r\n    const deletePost = (postId: number) => {\r\n        props.deletePost(postId)\r\n    }\r\n\r\n    const onEditMode = () => setEditMode(false);\r\n\r\n    const updatePost = (body: string) => {\r\n        if (body) {\r\n            props.updatePostTC(body, props.postId)\r\n            setTitle(body)\r\n        }\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${style.commentsWrapper} ${style.postContainer}`}>\r\n                <h2 style={{width: '100%', textAlign: 'center'}}>\r\n                    Post: <br/>\r\n                </h2>\r\n                <div onDoubleClick={onEditMode}>\r\n                    {editMode\r\n                        ? <p>{postText}</p>\r\n                        : <textarea autoFocus={true} value={title}\r\n                                    onChange={(e) => setTitle(e.currentTarget.value)}/>}\r\n                </div>\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button className={style.detailsButton}\r\n                        onClick={() => updatePost(title)}>\r\n                    Edit\r\n                </button>\r\n                <button className={style.detailsButton}\r\n                        onClick={() => deletePost(props.postId)}>\r\n                    Delete\r\n                </button>\r\n            </div>\r\n            <div className={style.commentsWrapper}>\r\n                <h2 style={{color: 'indigo'}}>\r\n                    Comments:<br/>\r\n                </h2>\r\n                {props.comments.map(c =>\r\n                    <div key={c.id} className={style.singleComment}>\r\n                        <h4>\r\n                            {c.name} <br/>\r\n                            {c.email}\r\n                        </h4>\r\n                        <div>\r\n                            {c.body}\r\n                        </div>\r\n                    </div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {commentAPI} from '../api/api';\r\n\r\ntype ActionsType = setCommentsAT\r\n\r\nexport type setCommentsAT = ReturnType<typeof setCommentAC>\r\n\r\nexport type CommentsDataType = {\r\n    postId: number\r\n    id: number\r\n    name: string\r\n    email: string\r\n    body: string\r\n}\r\n\r\nlet initialState: Array<CommentsDataType> = []\r\n\r\nexport const commentsReducer = (state: Array<CommentsDataType> = initialState, action: ActionsType): Array<CommentsDataType> => {\r\n    switch (action.type) {\r\n        case 'SET-COMMENTS': {\r\n            return action.posts.map(c => {\r\n                return {...c}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCommentAC = (posts: Array<CommentsDataType>) => {\r\n    return {type: 'SET-COMMENTS', posts} as const\r\n}\r\n\r\nexport const getCommentsTC = (postId: number) => (dispatch: Dispatch) => {\r\n    commentAPI.getComments(postId).then(res => {\r\n        console.log(res.data)\r\n        dispatch(setCommentAC(res.data))\r\n    });\r\n}","import React from 'react';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {ReduxStoreType} from '../../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {Details} from './Details';\r\nimport {CommentsDataType, getCommentsTC} from '../../../redux/comment-reducer';\r\nimport {deletePostTC, PostsDataType, updatePostTC} from '../../../redux/posts-reducer';\r\n\r\ntype UserContainerPropsType = {\r\n    comments: Array<CommentsDataType>\r\n    getCommentsTC: (postId: number) => void\r\n    posts: Array<PostsDataType>\r\n    deletePostTC: (postId: number) => void\r\n    updatePostTC: (body: string, postId: number) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & UserContainerPropsType\r\n\r\nclass PostsContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let postId = +this.props.match.params.id;\r\n        this.props.getCommentsTC(postId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Details comments={this.props.comments}\r\n                     posts={this.props.posts}\r\n                     postId={+this.props.match.params.id}\r\n                     updatePostTC={this.props.updatePostTC}\r\n                     deletePost={this.props.deletePostTC}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStoreType) => {\r\n    return {\r\n        comments: state.comments,\r\n        posts: state.posts,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {getCommentsTC, deletePostTC, updatePostTC}),\r\n)(PostsContainer)","import React, {useEffect} from 'react';\nimport style from './App.module.css';\nimport {getUsersTC} from './redux/users-reducer';\nimport {Route} from 'react-router-dom';\nimport UsersContainer from './components/Users/UsersContainer';\nimport {useDispatch} from 'react-redux';\nimport { Nav } from './components/Nav/Nav';\nimport PostsContainer from './components/Posts/PostsContainer';\nimport PostContainer from './components/Posts/Post/DetailsContainer';\n\nexport const App = () => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getUsersTC())\n    }, [dispatch])\n\n    return (\n        <div className={style.appWrapper}>\n\n            <Nav/>\n            <Route path='/users'\n                   render={() => <UsersContainer/>}/>\n            <Route path={`/user/:userId`} exact render={() => <PostsContainer/>}/>\n            <Route path={`/user/:userId/postInfo/:id`}  render={() => <PostContainer/>}/>\n        </div>\n    );\n}\n","import {applyMiddleware, createStore} from 'redux';\r\nimport {combineReducers} from 'redux';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {postsReducer} from './posts-reducer';\r\nimport {commentsReducer} from './comment-reducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    users: usersReducer,\r\n    posts: postsReducer,\r\n    comments: commentsReducer,\r\n});\r\n\r\nexport type ReduxStoreType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers,  applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport {store} from './redux/redux-store';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root')\n);\n"],"sourceRoot":""}